#!/bin/bash
set -e
source $(pwd)/.prj
### DO NOT USE '; ' in variables list! Only ';'
### pointers MUST BE like 'int** s'. NOT like 'int **s' nor 'int ** s'
args=("$@")
dd=0 #delete default constructor
dc=0 #delete copy constructor with operator=
dm=0 #delete move constructor with operator=
vi=0 #pr(I)vate variables flag
vo=0 #pr(O)tected variables flag
asi=0 #(A)dd public (S)etters to pr(I)vate variables
agi=0 #(A)dd public (G)etters to pr(I)vate variables
aso=0 #(A)dd public (S)etters to pr(O)tected variables
ago=0 #(A)dd public (G)etters to pr(O)tected variables
priv_vars=""
prot_vars=""
declare -a classes
for opt in ${args[@]}; do
    if [ $vi -eq 0 -a $vo -eq 0 ]; then
		if [[ "$opt" == "-dd" ]]; then
		    dd=1
		elif [[ "$opt" == "-dc" ]]; then                                                                           
		    dc=1
		elif [[ "$opt" == "-dm" ]]; then                                                                           
		    dm=1
		elif [[ "$opt" == "-vi" ]]; then
			vi=1
		elif [[ "$opt" == "-vo" ]]; then
			vo=1
		else
			classes[${#classes[*]}]="$opt"
		fi
	elif [ $vi -eq 1 -a $vo -eq 0 ]; then
		if [[ "$opt" == "-vo" ]]; then
			vo=1
		elif [[ "$opt" == "-as" ]]; then
			asi=1
		elif [[ "$opt" == "-ag" ]]; then
			agi=1
		else
			priv_vars="${priv_vars} $opt"
		fi
	elif [ $vi -eq 0 -a $vo -eq 1 ]; then
		if [[ "$opt" == "-vi" ]]; then
			vi=1
		elif [[ "$opt" == "-as" ]]; then
			aso=1
		elif [[ "$opt" == "-ag" ]]; then
			ago=1
		else
			prot_vars="${prot_vars} $opt"
		fi
	elif [ $vi -eq 1 -a $vo -eq 1 ]; then
		if [[ -z "$prot_vars" ]]; then
			if [[ "$opt" == "-as" ]]; then
				aso=1
			elif [[ "$opt" == "-ag" ]]; then
				ago=1
			else
				prot_vars="${prot_vars} $opt"
			fi
		elif [[ -z "$priv_vars" ]]; then 
			if [[ "$opt" == "-as" ]]; then
				asi=1
			elif [[ "$opt" == "-ag" ]]; then
				agi=1
			else	
				priv_vars="${priv_vars} $opt"
			fi
		fi
	fi
done
declare -a i_types
declare -a i_vars
declare -a o_types
declare -a o_vars
priv_vars=`echo $priv_vars | sed "s/;/;\n/g"`
OLD_IFS=${IFS}; 
IFS=$'\x0a'; 
for i in $priv_vars; do 
	i_types[${#i_types[*]}]=`echo $i | rev | cut -d ' ' -f2- | rev | sed "s/;//"`; 
	i_vars[${#i_vars[*]}]=`echo $i | rev | cut -d ' ' -f-1 | rev | sed "s/;//"`;
done; 
IFS=${OLD_IFS}
priv_vars=`echo "$priv_vars" | sed "s|^|        /**\\\brief */\n        |g" | sed '1,1d'`
#priv_vars=`echo "$priv_vars" | sed 's/$/\\/g'`

prot_vars=`echo $prot_vars | sed "s/;/;\n       /g"`
OLD_IFS=${IFS}; 
IFS=$'\x0a'; 
for i in $prot_vars; do 
	echo $i | rev | cut -d ' ' -f2- | rev | sed "s/;//"
	echo $i | rev | cut -d ' ' -f-1 | rev | sed "s/;//"
	o_types[${#o_types[*]}]=`echo $i | rev | cut -d ' ' -f2- | rev | sed "s/;//"`; 
	o_vars[${#o_vars[*]}]=`echo $i | rev | cut -d ' ' -f-1 | rev | sed "s/;//"`;
done; 
IFS=${OLD_IFS}
prot_vars=`echo "$prot_vars" | sed "s|^|        /**\\\brief */\n        |g"`
class_name=${classes[0]}
classes=("${classes[@]:1}")
flag=0
if [ ${#classes[@]} -ne 0 ]; then
	separator=", " # e.g. constructing regex, pray it does not contain %s
	regex="$( printf "${separator}%s" "${classes[@]}" )"
	parents="${regex:${#separator}}" # remove leading separator
	flag=1
fi
if [ -e "include" -a -e "src" ]; then
	if [ -e "include/$class_name.hpp" -o -e "src/$class_name.cpp" ]; then
		echo "File exists. Exit"
		exit
	fi
	d=$(date +%x\ %X)
	m4 -D cls=$class_name -D d="$d" -D dm=$dm -D dd=$dd -D dc=$dc -D auth="$auth" /etc/cpprj/cls_dummy.hpp.m4 > include/$class_name.hpp
	m4 -D cls=$class_name -D d="$d" -D dm=$dm -D dd=$dd -D dc=$dc -D auth="$auth" /etc/cpprj/cls_dummy.cpp.m4 > src/$class_name.cpp
	
	for ((a = ${#classes[@]} - 1;a >= 0; a--)); do
		sed -i "/#pragma once/ a #include \"${classes[a]}.hpp\"" include/$class_name.hpp
	done
	parents1=`echo $parents | sed 's|, |(), |g'`
	if [ $flag -eq 1 ]; then
		sed -i "s|() cls_parents|(): $parents1|g" src/$class_name.cpp
		sed -i "s|^cls_parents|$parents1|g" src/$class_name.cpp
		sed -i "s|cls_parents|\: $parents|g" include/$class_name.hpp
	else
		sed -i "s|cls_parents(), ||g" src/$class_name.cpp
		sed -i "s|cls_parents()||g" src/$class_name.cpp                                            
        sed -i "s|cls_parents||g" include/$class_name.hpp
	fi
	sed -i "s|(SOURCE_FILES|(SOURCE_FILES\n\t\tsrc/$class_name.cpp|" CMakeLists.txt
	if [ $vi -eq 1 ]; then
		priv_vars=${priv_vars//\\/\\\\}
		priv_vars=${priv_vars//&/\\&}
		priv_vars=${priv_vars//|/\\|}
		priv_vars=${priv_vars//;/\\;\\}
		priv_vars=${priv_vars//\//\\\/\\}
		sed -i "s|\/\*private data\*\/|$priv_vars |" include/$class_name.hpp
		if [ $asi -eq 1 -a $agi -eq 1 ]; then 
			for ((a = ${#i_vars[@]} - 1; a>=0; a--)); do
				sed -i "/\/\/pub functions/ a \\\t\t\/**\t\\\brief Setter method for variable ${i_vars[a]}\n\t\t\t\\\param [in] x - \n\t\t*\/\n\t\t void set_${i_vars[a]} (const ${i_types[a]} & x);" include/$class_name.hpp
				sed -i "/\/\/pub functions/ a \\\t\t\/**\t\\\brief Getter method for variable ${i_vars[a]}\n\t\t\t\\\return Value of variable ${i_vars[a]} \n\t\t*\/\n\t\t ${i_types[a]} get_${i_vars[a]} () const;" include/$class_name.hpp
			done
		elif [ $asi -eq 1 ]; then
			for ((a = ${#i_vars[@]} - 1; a>=0; a--)); do                                                            
				sed -i "/\/\/pub functions/ a \\\t\t\/**\t\\\brief Setter method for variable ${i_vars[a]}\n\t\t\t\\\param [in] x - \n\t\t*/\n\t\t void set_${i_vars[a]} (const ${i_types[a]} & x);" include/$class_name.hpp
			done	
		elif [ $agi -eq 1 ]; then
			for ((a = ${#i_vars[@]} - 1; a>=0; a--)); do                                                            
				sed -i "/\/\/pub functions/ a \\\t\t\/**\t\\\brief Getter method for variable ${i_vars[a]}\n\t\t\t\\\return Value of variable ${i_vars[a]} \n\t\t*/\n\t\t ${i_types[a]} get_${i_vars[a]} () const;" include/$class_name.hpp
			done		
		fi
	fi
	if [ $vo -eq 1 ]; then
		prot_vars=${prot_vars//\\/\\\\}
		prot_vars=${prot_vars//&/\\&}
		prot_vars=${prot_vars//|/\\|}
		prot_vars=${prot_vars//;/\\;\\}
		prot_vars=${prot_vars//\//\\\/\\}
		sed -i "s|\/\*protected data\*\/|$prot_vars |" include/$class_name.hpp
		if [ $aso -eq 1 -a $ago -eq 1 ]; then 
			for ((a = ${#o_vars[@]} - 1; a>=0; a--)); do                                                            
				sed -i "/\/\/pub functions/ a \\\t\t\/**\t\\\brief Setter method for variable ${o_vars[a]}\n\t\t\t\\\param [in] x - \n\t\t*/\n\t\t void set_${o_vars[a]} (const ${o_types[a]} & x);" include/$class_name.hpp
				sed -i "/\/\/pub functions/ a \\\t\t\/**\t\\\brief Getter method for variable ${o_vars[a]}\n\t\t\t\\\return Value of variable ${o_vars[a]} \n\t\t*/\n\t\t ${o_types[a]} get_${o_vars[a]} () const;" include/$class_name.hpp
			done
		elif [ $asi -eq 1 ]; then
			for ((a = ${#o_vars[@]} - 1; a>=0; a--)); do                                                            
				sed -i "/\/\/pub functions/ a \\\t\t\/**\t\\\brief Setter method for variable ${o_vars[a]}\n\t\t\t\\\param [in] x - \n\t\t*/\n\t\t void set_${o_vars[a]} (const ${o_types[a]} & x);" include/$class_name.hpp
			done	
		elif [ $agi -eq 1 ]; then
			for ((a = ${#i_vars[@]} - 1; a>=0; a--)); do                                                            
				sed -i "/\/\/pub functions/ a \\\t\t\/**\t\\\brief Getter method for variable ${o_vars[a]}\n\t\t\t\\\return Value of variable ${o_vars[a]} \n\t\t*/\n\t\t ${o_types[a]} get_${o_vars[a]} () const;" include/$class_name.hpp
			done
		fi
	fi
	sed -i '/./,/^$/!d' include/$class_name.hpp
	sed -i '/./,/^$/!d' src/$class_name.cpp
else
	echo "You are not in the project directory! Exit"
fi
